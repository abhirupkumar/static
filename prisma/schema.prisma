generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id           String         @id @default(uuid())
  name         String
  avatarUrl    String
  email        String         @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  role         Role           @default(PROJECT_USER)
  workspaceId  String?
  Workspace    Workspace?     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  Permissions  Permissions[]
  Notification Notification[]

  @@index([workspaceId])
}

model Permissions {
  id        String  @id @default(uuid())
  email     String
  projectId String
  access    Boolean
  User      User    @relation(fields: [email], references: [email], onDelete: Cascade)
  Project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([email])
}

model Workspace {
  id               String                   @id @default(uuid())
  connectAccountId String?                  @default("")
  customerId       String                   @default("")
  name             String
  workEmail        String
  whiteLabel       Boolean                  @default(true)
  createdAt        DateTime                 @default(now())
  updatedAt        DateTime                 @updatedAt
  users            User[]
  Project          Project[]
  SidebarOption    WorkspaceSidebarOption[]
  Invitation       Invitation[]
  Notification     Notification[]
  Subscription     Subscription?
  AddOns           AddOns[]
}

model Project {
  id               String                 @id @default(uuid())
  connectAccountId String?                @default("")
  name             String
  projectLogo      String?
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  workEmail        String
  workPhone        String?
  goal             Int                    @default(5)
  address          String?
  city             String?
  zipCode          String?
  state            String?
  country          String?
  workspaceId      String
  Workspace        Workspace              @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  SidebarOption    ProjectSidebarOption[]
  Permissions      Permissions[]
  Site             Site?
  Media            Media[]
  Contact          Contact[]
  Trigger          Trigger[]
  Automation       Automation[]
  Notification     Notification[]

  @@index([workspaceId])
}

model Trigger {
  id          String       @id @default(uuid())
  name        String
  type        TriggerTypes
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  projectId   String
  Project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  Automations Automation[]

  @@index([projectId])
}

model Automation {
  id                 String               @id @default(uuid())
  name               String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  triggerId          String?
  published          Boolean              @default(false)
  projectId          String
  Trigger            Trigger?             @relation(fields: [triggerId], references: [id], onDelete: Cascade)
  Project            Project              @relation(fields: [projectId], references: [id], onDelete: Cascade)
  Action             Action[]
  AutomationInstance AutomationInstance[]

  @@index([triggerId])
  @@index([projectId])
}

model AutomationInstance {
  id           String     @id @default(uuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  automationId String
  active       Boolean    @default(false)
  Automation   Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)

  @@index([automationId])
}

model Action {
  id           String     @id @default(uuid())
  name         String
  type         ActionType
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  automationId String
  order        Int
  Automation   Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)

  @@index([automationId])
}

model Contact {
  id        String   @id @default(uuid())
  name      String
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projectId String
  Project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

model Media {
  id        String   @id @default(uuid())
  type      String?
  name      String
  link      String   @unique
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

model Site {
  id            String      @id @default(uuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  title         String
  description   String?
  keywords      String?
  published     Boolean     @default(false)
  subDomainName String?     @unique
  domain        String?     @unique
  favicon       String?
  projectId     String      @unique
  liveProducts  String?     @default("[]")
  Project       Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  SitePages     SitePage[]
  ClassName     ClassName[]

  @@index([projectId])
}

model ClassName {
  id         String   @id @default(uuid())
  name       String
  color      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  siteId     String
  customData String?
  Site       Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@index([siteId])
}

model SitePage {
  id           String   @id @default(uuid())
  name         String
  pathName     String   @default("")
  title        String?
  description  String?
  keywords     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  visits       Int      @default(0)
  content      String?
  order        Int
  isPublished  Boolean  @default(false)
  previewImage String?
  siteId       String
  Site         Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@index([siteId])
}

model WorkspaceSidebarOption {
  id          String     @id @default(uuid())
  name        String     @default("Menu")
  link        String     @default("#")
  icon        Icon       @default(info)
  workspaceId String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Workspace   Workspace? @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
}

model ProjectSidebarOption {
  id        String   @id @default(uuid())
  name      String   @default("Menu")
  link      String   @default("#")
  icon      Icon     @default(info)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projectId String?
  Project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

model Invitation {
  id          String           @id @default(uuid())
  email       String           @unique
  workspaceId String
  status      InvitationStatus @default(PENDING)
  role        Role             @default(PROJECT_USER)
  Workspace   Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
}

model Notification {
  id           String    @id @default(uuid())
  notification String
  workspaceId  String
  projectId    String?
  userId       String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  User         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Workspace    Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  Project      Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
  @@index([projectId])
  @@index([userId])
}

model Subscription {
  id                   String     @id @default(uuid())
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
  plan                 Plan?
  price                String?
  active               Boolean    @default(false)
  priceId              String
  customerId           String
  currentPeriodEndDate DateTime
  subscritiptionId     String     @unique
  workspaceId          String?    @unique
  Workspace            Workspace? @relation(fields: [workspaceId], references: [id])

  @@index([customerId])
}

model AddOns {
  id          String     @id @default(uuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  name        String
  active      Boolean    @default(false)
  priceId     String     @unique
  workspaceId String?
  Workspace   Workspace? @relation(fields: [workspaceId], references: [id])

  @@index([workspaceId])
}

enum Role {
  WORKSPACE_OWNER
  WORKSPACE_ADMIN
  PROJECT_USER
  PROJECT_GUEST
}

enum Icon {
  settings
  chart
  calendar
  check
  chip
  compass
  database
  flag
  home
  info
  link
  lock
  messages
  notification
  payment
  power
  receipt
  shield
  star
  tune
  videorecorder
  wallet
  warning
  headphone
  send
  pipelines
  person
  category
  contact
  clipboardIcon
}

enum TriggerTypes {
  CONTACT_FORM
}

enum ActionType {
  CREATE_CONTACT
}

enum InvitationStatus {
  ACCEPTED
  REVOKED
  PENDING
}

enum Plan {
  price_1OYxkqFj9oKEERu1NbKUxXxN
  price_1OYxkqFj9oKEERu1KfJGWxgN
}

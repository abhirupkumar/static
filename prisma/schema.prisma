datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  WORKSPACE_OWNER
  WORKSPACE_ADMIN
  PROJECT_USER
  PROJECT_GUEST
}

enum Icon {
  settings
  chart
  calendar
  check
  chip
  compass
  database
  flag
  home
  info
  link
  lock
  messages
  notification
  payment
  power
  receipt
  shield
  star
  tune
  videorecorder
  wallet
  warning
  headphone
  send
  pipelines
  person
  category
  contact
  clipboardIcon
}

model User {
  id           String         @id @default(uuid())
  name         String
  avatarUrl    String         @db.Text
  email        String         @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  role         Role           @default(PROJECT_USER)
  workspaceId  String?
  Workspace    Workspace?     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  Permissions  Permissions[]
  Ticket       Ticket[]
  Notification Notification[]

  @@index([workspaceId])
}

model Permissions {
  id        String  @id @default(uuid())
  email     String
  User      User    @relation(fields: [email], references: [email], onDelete: Cascade)
  projectId String
  Project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  access    Boolean

  @@index([projectId])
  @@index([email])
}

model Workspace {
  id               String                   @id @default(uuid())
  connectAccountId String?                  @default("")
  customerId       String                   @default("")
  name             String
  workspaceLogo    String                   @db.Text
  workEmail        String                   @db.Text
  workPhone        String
  whiteLabel       Boolean                  @default(true)
  address          String
  city             String
  zipCode          String
  state            String
  country          String
  goal             Int                      @default(5)
  users            User[]
  createdAt        DateTime                 @default(now())
  updatedAt        DateTime                 @updatedAt
  Project          Project[]
  SidebarOption    WorkspaceSidebarOption[]
  Invitation       Invitation[]
  Notification     Notification[]
  Subscription     Subscription?
  AddOns           AddOns[]
}

model Project {
  id               String                 @id @default(uuid())
  connectAccountId String?                @default("")
  name             String
  projectLogo      String                 @db.Text
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  workEmail        String                 @db.Text
  workPhone        String
  goal             Int                    @default(5)
  address          String
  city             String
  zipCode          String
  state            String
  country          String
  workspaceId      String
  Workspace        Workspace              @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  SidebarOption    ProjectSidebarOption[]
  Permissions      Permissions[]
  Funnels          Funnel[]
  Media            Media[]
  Contact          Contact[]
  Trigger          Trigger[]
  Automation       Automation[]
  Pipeline         Pipeline[]
  Tags             Tag[]
  Notification     Notification[]

  @@index([workspaceId])
}

model Tag {
  id        String   @id @default(uuid())
  name      String
  color     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projectId String

  Project Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  Ticket  Ticket[]

  @@index([projectId])
}

model Pipeline {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Lane      Lane[]
  Project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  @@index([projectId])
}

model Lane {
  id         String   @id @default(uuid())
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Pipeline   Pipeline @relation(fields: [pipelineId], references: [id], onDelete: Cascade)
  pipelineId String
  Tickets    Ticket[]
  order      Int      @default(0)

  @@index([pipelineId])
}

model Ticket {
  id          String   @id @default(uuid())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  laneId      String
  order       Int      @default(0)
  Lane        Lane     @relation(fields: [laneId], references: [id], onDelete: Cascade)
  value       Decimal?
  description String?
  Tags        Tag[]

  customerId String?
  Customer   Contact? @relation(fields: [customerId], references: [id], onDelete: SetNull)

  assignedUserId String?
  Assigned       User?   @relation(fields: [assignedUserId], references: [id], onDelete: SetNull)

  @@index([laneId])
  @@index([customerId])
  @@index([assignedUserId])
}

enum TriggerTypes {
  CONTACT_FORM
}

model Trigger {
  id          String       @id @default(uuid())
  name        String
  type        TriggerTypes
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  projectId   String
  Project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  Automations Automation[]

  @@index([projectId])
}

model Automation {
  id                 String               @id @default(uuid())
  name               String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  triggerId          String?
  published          Boolean              @default(false)
  Trigger            Trigger?             @relation(fields: [triggerId], references: [id], onDelete: Cascade)
  projectId          String
  Project            Project              @relation(fields: [projectId], references: [id], onDelete: Cascade)
  Action             Action[]
  AutomationInstance AutomationInstance[]

  @@index([triggerId])
  @@index([projectId])
}

model AutomationInstance {
  id           String     @id @default(uuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  automationId String
  Automation   Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)
  active       Boolean    @default(false)

  @@index([automationId])
}

enum ActionType {
  CREATE_CONTACT
}

model Action {
  id           String     @id @default(uuid())
  name         String
  type         ActionType
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  automationId String
  order        Int
  Automation   Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)
  laneId       String     @default("0")

  @@index([automationId])
}

model Contact {
  id        String   @id @default(uuid())
  name      String
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projectId String

  Project Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  Ticket  Ticket[]

  @@index([projectId])
}

model Media {
  id        String   @id @default(uuid())
  type      String?
  name      String
  link      String   @unique
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

model Funnel {
  id            String       @id @default(uuid())
  name          String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  description   String?
  published     Boolean      @default(false)
  subDomainName String?      @unique
  favicon       String?      @db.Text
  projectId     String
  Project       Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  FunnelPages   FunnelPage[]
  liveProducts  String?      @default("[]")
  ClassName     ClassName[]

  @@index([projectId])
}

model ClassName {
  id         String   @id @default(uuid())
  name       String
  color      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  funnelId   String
  customData String?  @db.LongText
  Funnel     Funnel   @relation(fields: [funnelId], references: [id], onDelete: Cascade)

  @@index([funnelId])
}

model FunnelPage {
  id           String   @id @default(uuid())
  name         String
  pathName     String   @default("")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  visits       Int      @default(0)
  content      String?  @db.LongText
  order        Int
  previewImage String?  @db.Text
  funnelId     String
  Funnel       Funnel   @relation(fields: [funnelId], references: [id], onDelete: Cascade)

  @@index([funnelId])
}

model WorkspaceSidebarOption {
  id          String     @id @default(uuid())
  name        String     @default("Menu")
  link        String     @default("#")
  icon        Icon       @default(info)
  workspaceId String
  Workspace   Workspace? @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([workspaceId])
}

model ProjectSidebarOption {
  id        String   @id @default(uuid())
  name      String   @default("Menu")
  link      String   @default("#")
  icon      Icon     @default(info)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String?

  @@index([projectId])
}

enum InvitationStatus {
  ACCEPTED
  REVOKED
  PENDING
}

model Invitation {
  id          String           @id @default(uuid())
  email       String           @unique
  workspaceId String
  Workspace   Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  status      InvitationStatus @default(PENDING)
  role        Role             @default(PROJECT_USER)

  @@index([workspaceId])
}

model Notification {
  id           String  @id @default(uuid())
  notification String
  workspaceId  String
  projectId    String?
  userId       String

  User      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  Project   Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([workspaceId])
  @@index([projectId])
  @@index([userId])
}

enum Plan {
  price_1OYxkqFj9oKEERu1NbKUxXxN
  price_1OYxkqFj9oKEERu1KfJGWxgN
}

model Subscription {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  plan      Plan?
  price     String?
  active    Boolean  @default(false)

  priceId              String
  customerId           String
  currentPeriodEndDate DateTime
  subscritiptionId     String   @unique

  workspaceId String?    @unique
  Workspace   Workspace? @relation(fields: [workspaceId], references: [id])

  @@index([customerId])
}

model AddOns {
  id          String     @id @default(uuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  name        String
  active      Boolean    @default(false)
  priceId     String     @unique
  workspaceId String?
  Workspace   Workspace? @relation(fields: [workspaceId], references: [id])

  @@index([workspaceId])
}
